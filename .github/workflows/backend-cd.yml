name: Backend CD

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/**"
      - "backend/**"
      - "infra/docker/**"

# OIDC 사용을 위해 꼭 필요: id-token: write
permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: ourlog-backend
      IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/ourlog-backend

    steps:
      # 0) Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) 버전 태깅 + 릴리스 (선호도에 따라 유지/변경)
      - name: Create Git Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Tag Output
        id: set_tag_output
        run: echo "new_tag=${{ steps.create_tag.outputs.new_tag }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

      # 2) Docker 빌드/푸시 (GHCR)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}
            ${{ env.IMAGE_REPO }}:sha-${{ github.sha }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 3) AWS 자격 구성 (OIDC, Access Key 불필요)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<RoleForGitHubActions> # ← 본인 Role ARN
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-actions-deploy

      # 4) 대상 EC2 식별 (태그 기반)
      - name: Get EC2 Instance ID
        id: get_instance
        run: |
          set -euo pipefail
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=terra-ec2-web" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
            echo "❌ No running EC2 instance found"
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "🔎 Using EC2 instance: $INSTANCE_ID"

      # 5) Blue/Green 배포 (SSM으로 원격 명령)
      - name: Blue/Green deploy via SSM
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ""
          aws-secret-access-key: ""
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Deploy
          command: |
            set -euo pipefail

            IMAGE="${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}"
            echo "🚢 Image: $IMAGE"

            # --- Blue/Green 상태 파악 ---
            if docker ps --format '{{.Names}}' | grep -q '^backend-blue$'; then
              ACTIVE=blue;   INACTIVE=green; PORT_ACTIVE=8081; PORT_INACTIVE=8082
            elif docker ps --format '{{.Names}}' | grep -q '^backend-green$'; then
              ACTIVE=green;  INACTIVE=blue;  PORT_ACTIVE=8082; PORT_INACTIVE=8081
            else
              ACTIVE=none;   INACTIVE=blue;  PORT_ACTIVE=;     PORT_INACTIVE=8081
            fi
            NEW_CONTAINER="backend-$INACTIVE"
            echo "🔁 ACTIVE=$ACTIVE, NEW=$NEW_CONTAINER -> $PORT_INACTIVE"

            # --- 네트워크 보장 ---
            docker network inspect common >/dev/null 2>&1 || docker network create common

            # --- inactive 컨테이너 정리 & 신규 기동 ---
            docker rm -f "$NEW_CONTAINER" >/dev/null 2>&1 || true
            docker run -d --name "$NEW_CONTAINER" \
              --network common \
              -p $PORT_INACTIVE:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              "$IMAGE"

            # --- HEALTHCHECK (컨테이너 내부 /actuator/health) ---
            echo "⏱ Waiting for $NEW_CONTAINER to be healthy..."
            HEALTH_OK=false
            TIMEOUT=120
            INTERVAL=3
            ELAPSED=0
            until [ $ELAPSED -ge $TIMEOUT ]; do
              STATUS=$(docker exec "$NEW_CONTAINER" sh -c "curl -fsS -o /dev/null -w '%{http_code}' http://127.0.0.1:8080/actuator/health" || echo 000)
              if [ "$STATUS" = "200" ]; then
                HEALTH_OK=true; echo "✅ Healthy!"; break
              fi
              sleep $INTERVAL; ELAPSED=$((ELAPSED + INTERVAL))
            done
            if [ "$HEALTH_OK" = false ]; then
              echo "❌ Health check failed"; docker logs "$NEW_CONTAINER" || true
              docker rm -f "$NEW_CONTAINER" || true; exit 1
            fi

            # --- Nginx Proxy Manager(NPM) 업스트림 전환 ---
            TOKEN=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
              -H "Content-Type: application/json" \
              -d "{\"identity\":\"${{ secrets.NPM_ID }}\",\"secret\":\"${{ secrets.NPM_PASSWORD }}\"}" \
              | jq -r '.token')
            echo "::add-mask::$TOKEN"

            PROXY_ID=$(curl -s -X GET "http://127.0.0.1:81/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer $TOKEN" \
              | jq ".[] | select(.domain_names[]==\"${{ secrets.NPM_DOMAIN }}\") | .id")
            if [ -z "$PROXY_ID" ] || [ "$PROXY_ID" = "null" ]; then
              echo "❌ Proxy host not found"; exit 1
            fi

            NEW_CONFIG=$(jq -n --arg host "$NEW_CONTAINER" --argjson port 8080 '{forward_host: $host, forward_port: $port}')
            curl -sS --fail -X PUT "http://127.0.0.1:81/api/nginx/proxy-hosts/$PROXY_ID" \
              -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$NEW_CONFIG" >/dev/null
            echo "🔄 Upstream switched to $NEW_CONTAINER"

            # --- 기존 ACTIVE 정리 ---
            if [ "$ACTIVE" != "none" ]; then
              docker rm -f "backend-$ACTIVE" || true
            fi

            echo "🎉 Blue/Green switch complete → $NEW_CONTAINER"