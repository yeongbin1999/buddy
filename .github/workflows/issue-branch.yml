name: Issue → Branch

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: read

jobs:
  create-branch:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine base branch (prefer dev, fallback main)
        id: base
        run: |
          git fetch --prune origin
          if git ls-remote --heads origin dev | grep -q refs/heads/dev; then
            echo "base=dev" >> $GITHUB_OUTPUT
          else
            echo "base=main" >> $GITHUB_OUTPUT
          fi

      - name: Generate Branch Name (type/scope/number)
        id: gen
        shell: bash
        run: |
          set -euo pipefail

          TITLE="${{ github.event.issue.title }}"
          NUM="${{ github.event.issue.number }}"

          # type(scope): summary 형식에서 type/scope 추출
          TYPE=$(echo "$TITLE" | sed -nE 's/^(feat|fix|refactor|docs|chore|hotfix)\((fe|be|infra)\):.*/\1/p')
          SCOPE=$(echo "$TITLE" | sed -nE 's/^(feat|fix|refactor|docs|chore|hotfix)\((fe|be|infra)\):.*/\2/p')

          # 기본값 보정
          [ -z "$TYPE" ] && TYPE="chore"
          [ -z "$SCOPE" ] && SCOPE="infra"

          BRANCH="${TYPE}/${SCOPE}/${NUM}"

          echo "✅ TYPE   : $TYPE"
          echo "✅ SCOPE  : $SCOPE"
          echo "✅ BRANCH : $BRANCH"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Skip if branch already exists
        id: exists
        run: |
          if git ls-remote --heads origin "${{ steps.gen.outputs.branch }}" | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create & push branch from base
        if: steps.exists.outputs.exists == 'false'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --prune origin
          git checkout -b "${{ steps.gen.outputs.branch }}" "origin/${{ steps.base.outputs.base }}"
          git push origin "${{ steps.gen.outputs.branch }}"