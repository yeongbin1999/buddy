name: Close issues & delete feature branch on dev merge

on:
  pull_request:
    types: [closed]

permissions:
  issues: write
  contents: write
  pull-requests: read

jobs:
  on-dev-merge:
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Close linked issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const text = `${pr.title}\n${pr.body || ''}`;

            // #123, (#123)
            const directRefs = [...text.matchAll(/#(\d+)/g)].map(m => Number(m[1]));
            // closes/fixes/resolves #123 (ÎåÄÏÜåÎ¨∏Ïûê Î¨¥Ïãú)
            const verbRefs = [...text.matchAll(/\b(closes?|fix(?:e|es)?s?|resolves?)\s+#(\d+)/ig)].map(m => Number(m[2]));

            const issueSet = new Set([...directRefs, ...verbRefs]);

            if (issueSet.size === 0) {
              console.log('‚ÑπÔ∏è No linked issues found in PR title/body.');
            } else {
              const { owner, repo } = context.repo;
              for (const issue_number of issueSet) {
                try {
                  await github.rest.issues.update({ owner, repo, issue_number, state: 'closed' });
                  console.log(`‚úÖ Closed issue #${issue_number}`);
                } catch (e) {
                  console.log(`‚ö†Ô∏è Skip closing #${issue_number}: ${e.message}`);
                }
              }
            }

      - name: Delete head branch (skip protected/main/dev and fork PRs)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const headRef   = pr.head.ref;   // ex) feat/be/123
            const baseRef   = pr.base.ref;   // dev
            const headRepo  = pr.head.repo?.full_name;
            const thisRepo  = context.repo.owner + '/' + context.repo.repo;

            // Ìè¨ÌÅ¨ÏóêÏÑú Ïò® PRÏùÄ ÏÇ≠Ï†ú Î∂àÍ∞Ä
            if (headRepo !== thisRepo) {
              console.log(`‚ÑπÔ∏è Head branch is on a fork (${headRepo}); cannot delete.`);
              return;
            }

            const protectedBranches = ['main', 'dev'];
            if (protectedBranches.includes(headRef)) {
              console.log(`‚ÑπÔ∏è Skip deleting protected branch: ${headRef}`);
              return;
            }

            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${headRef}`
              });
              console.log(`üóëÔ∏è Deleted branch: ${headRef}`);
            } catch (e) {
              console.log(`‚ö†Ô∏è Failed to delete ${headRef}: ${e.message}`);
            }